---
permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

name: 'Terraform'
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
# Unresolved directive in pipelines_github.adoc - include::partial$variables-{ci-variables}-github.adoc[]
      TF_ROOT: terraform/dev
    defaults:
      run:
        working-directory: ${{ env.TF_ROOT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::352898041397:role/github_actions_test
          role-duration-seconds: 900
          aws-region: us-west-2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out plan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Install aws-iam-authenticator
        if: github.event_name == 'push'
        run: |
          mkdir -p ${{ github.workspace }}/bin
          curl -o ${{ github.workspace }}/bin/aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
          chmod +x ${{ github.workspace }}/bin/aws-iam-authenticator
          echo "PATH=${{ github.workspace }}/bin:$PATH" >> $GITHUB_ENV
          export PATH=${{ github.workspace }}/bin
          echo "export PATH=$PATH:${{ github.workspace }}/bin" >> ~/.bashrc
          aws-iam-authenticator help

      - name: Terraform Plan
        if: github.event_name == 'push'
        run: terraform plan --detailed-exitcode -no-color -out=apply_push.pln

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply --auto-approve apply_push.pln

      - name: Terraform Plan destroy
        if: github.event_name == 'push'
        run: terraform plan --detailed-exitcode -no-color -out=destroy.pln

      - name: Terraform Apply destroy
        if: github.event_name == 'push'
        run: terraform apply --auto-approve destroy.pln
