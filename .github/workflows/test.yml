name: Test

on:
  push:
    branches:
      - main

jobs:
  # Label of the container job
  test:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    environment: testing
    container: golang:1.17-alpine

    # Service containers to run with `container-job`
    # Service containers are Docker containers that provide a simple and portable way for you to host services that you might need to test or operate your application in a workflow. For example, your workflow might need to run integration tests that require access to a database and memory cache
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Connect to PostgreSQL
        working-directory: ./test-app
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: go run cmd/ops-test-app/main.go &
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRESQL_HOST: localhost
          # The default PostgreSQL port